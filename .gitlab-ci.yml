---
stages:
  - preflight
  - check
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# Generic preflight template
.preflight: &preflight
  stage: preflight
  tags:
    - hass

# Generic ESPHome template
.esphome: &esphome
  stage: check
  variables:
    PYTHONPATH: "/usr/src/app:$PYTHONPATH"
  before_script:
    - esphome dummy.yaml version
    - mv fake_secrets.yaml secrets.yaml
  script:
    - |
      for file in $(find \
        ./ \
        -type f \
        -name "*.yaml"\
        -not -name "secrets.yaml"
        ); do
        esphome $file config
      done
  tags:
    - hass

.esphome-deploy: &esphome-deploy
  stage: deploy
  variables:
    PYTHONPATH: "/usr/src/app:$PYTHONPATH"
  image:
    name: esphome/esphome:latest
    entrypoint: [""]
  before_script:
    - apt update && apt install -y git-crypt openssl
    - openssl enc -aes-256-cbc -pbkdf2 -d -in git-crypt.key.enc -out git-crypt.key -k $OPENSSL_PASSPRHASE
    - git-crypt unlock git-crypt.key
    - esphome dummy.yaml version
  after_script:
    - rfm -f git-crypt.key
  tags:
    - hass

yamllint:
  <<: *preflight
  image: sdesbure/yamllint
  before_script:
    - yamllint --version
    - mv fake_secrets.yaml secrets.yaml
  script:
    - yamllint .
  allow_failure: true

markdownlint:
  <<: *preflight
  image:
    name: ruby:alpine
    entrypoint: [""]
  before_script:
    - apk --no-cache add git
    - gem install mdl
    - mdl --version
  script:
    - mdl --style all --warnings --git-recurse .

# ESPHome test jobs
esphome-latest:
  <<: *esphome
  image:
    name: esphome/esphome:latest
    entrypoint: [""]

esphome-beta:
  <<: *esphome
  image:
    name: esphome/esphome:beta
    entrypoint: [""]
  allow_failure: true

# Deployment jobs
room_sensor_toilet:
  <<: *esphome-deploy
  script:
    - esphome room_sensor_toilet.yaml run
  only:
    refs:
      - master
